# Generated by Django 3.1.6 on 2021-02-09 10:54

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bakings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name of baking')),
                ('perform_count', models.PositiveIntegerField(blank=True, default=0, verbose_name='Total count of realizations of this recipe')),
                ('grade', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Average grade of recipe')),
            ],
        ),
        migrations.CreateModel(
            name='ProportionBaking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('water_to_flour', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='Water to flour ratio in recipe')),
                ('milk_to_flour', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='Milk to flour ratio in recipe')),
                ('salt_to_flour', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='Salt to flour ratio in recipe')),
                ('oil_to_flour', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='Oil to flour ratio in recipe')),
                ('butter_to_flour', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='Butter to flour ratio in recipe')),
                ('sourdough_to_flour', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='Sourdough to flour ratio in recipe')),
                ('poolish_to_flour', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='Poolish to flour ratio in recipe')),
                ('wheat550_to_whole', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='550 type wheat flour to whole flour ratio in recipe')),
                ('wheat00_to_whole', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='00 type wheat flour to whole flour ratio in recipe')),
                ('wheat650_to_whole', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='650 type wheat flour to whole flour ratio in recipe')),
                ('wheat2000_to_whole', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='2000 type wheat flour to whole flour ratio in recipe')),
                ('rye720_to_whole', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='720 type rye flour to whole flour ratio in recipe')),
                ('rye2000_to_whole', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='2000 type rye flour to whole flour ratio in recipe')),
                ('spelt650_to_whole', models.DecimalField(decimal_places=3, default=0.0, max_digits=10, verbose_name='650 type rye flour to whole flour ratio in recipe')),
                ('baking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.bakings', verbose_name='Name of baking')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessBaking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preparing_prefermentor_first', models.PositiveIntegerField(default=720, verbose_name='Duration of first prefermentation in minutes')),
                ('preparing_prefermentor_second', models.PositiveIntegerField(default=180, verbose_name='Duration of second prefermentation in minutes')),
                ('stretch_fold_count', models.PositiveIntegerField(default=4, verbose_name='Number of strech&fold reps')),
                ('growing', models.PositiveIntegerField(default=180, verbose_name='Duration of dough growing in minutes')),
                ('time_of_baking', models.PositiveIntegerField(default=50, verbose_name='Time of baking in minutes')),
                ('temperature_of_baking', models.PositiveIntegerField(default=200, verbose_name='Temperature of baking in degrees of Celsius')),
                ('baking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.bakings', verbose_name='Name of baking')),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentBaking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bowl', models.BooleanField(default=True)),
                ('silicone_spatula', models.BooleanField(default=True)),
                ('oven', models.BooleanField(default=True)),
                ('food_foil', models.BooleanField(default=True)),
                ('scale', models.BooleanField(default=True)),
                ('baking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='project.bakings', verbose_name='Name of baking')),
            ],
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(water_to_flour__gte=0), name='Water to flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(milk_to_flour__gte=0), name='Milk to flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(salt_to_flour__gte=0), name='Salt to flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(oil_to_flour__gte=0), name='Oil to flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(butter_to_flour__gte=0), name='Butter to flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(sourdough_to_flour__gte=0), name='Sourdough to flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(poolish_to_flour__gte=0), name='Poolish to flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(wheat550_to_whole__gte=0), name='550 type wheat flour to whole flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(wheat00_to_whole__gte=0), name='00 type wheat flour to whole flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(wheat650_to_whole__gte=0), name='650 type wheat flour to whole flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(wheat2000_to_whole__gte=0), name='2000 type wheat flour to whole flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(rye720_to_whole__gte=0), name='720 type rye flour to whole flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(rye2000_to_whole__gte=0), name='2000 type rye flour to whole flour ratio cannot be negative'),
        ),
        migrations.AddConstraint(
            model_name='proportionbaking',
            constraint=models.CheckConstraint(check=models.Q(spelt650_to_whole__gte=0), name='650 type spelt flour to whole flour ratio cannot be negative'),
        ),
    ]
